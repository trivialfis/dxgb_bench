# syntax=docker/dockerfile:experimental
FROM rapidsai/ci-conda:cuda12.8.0-ubuntu22.04-py3.12
ARG ARCH
ARG SM

ENV DEBIAN_FRONTEND noninteractive
SHELL ["/bin/bash", "-c"]

RUN set -x \
    # basic dependencies
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub && \
    apt-get update && apt-get upgrade -y && \
    apt-get install gosu -y

RUN \
    # mamba installation dependencies
    apt-get install unzip bzip2 curl -y

RUN mkdir ws

COPY dxgb_bench/dev/xgboost_dev.yml ws/xgboost_dev.yml
COPY dxgb_bench/dev/install_nsight.sh ws/install_nsight.sh
COPY dxgb_bench/dev/build_dxgb_bench.sh ws/build_dxgb_bench.sh

RUN \
    cd ws && \
    ./install_nsight.sh $ARCH && \
    cd -

RUN --mount=type=cache,target=/opt/conda/pkgs mamba env update -n base -f ws/xgboost_dev.yml -v && mamba clean --all --yes


RUN \
    cd /ws && \
    git clone --recursive  https://github.com/trivialfis/xgboost.git && \
    cd xgboost && \
    git checkout cca843ca8 && \
    git submodule update && \
    cd /

RUN \
    cd /ws && \
    rm -rf ./build && \
    mkdir build && \
    cd build && \
    cmake -GNinja ../xgboost/ -DCMAKE_BUILD_TYPE=RelWithDebInfo \
	  -DUSE_CUDA=ON \
	  -DUSE_NCCL=ON \
	  -DBUILD_WITH_SHARED_NCCL=ON \
	  -DUSE_DLOPEN_NCCL=OFF \
	  -DUSE_OPENMP=ON \
	  -DUSE_NVTX=ON \
	  -DPLUGIN_RMM=ON \
	  -DCMAKE_CUDA_ARCHITECTURES=$SM -DENABLE_ALL_WARNINGS=ON && \
    cd /ws/build && \
    time ninja && \
    cd /ws/xgboost/python-package && \
    pip install . --no-deps --no-build-isolation && \
    rm -rf /ws/build && rm -rf /ws/xgboost

COPY dxgb_bench ws/dxgb_bench

RUN \
    cd /ws/ && \
    ./build_dxgb_bench.sh
